datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String        @unique
  password     String
  avatar       String? // Optional avatar image URL
  phoneNumber  String? // Optional phone number
  role         String        @default("user") // For admin or user roles
  reservations Reservation[]
  reviews      Review[]
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Field {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  location     String
  sportType    String
  price        Float
  reservations Reservation[]
  Review       Review[]
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Reservation {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  fieldId         String   @db.ObjectId
  date            DateTime
  timeSlot        String
  totalPrice      Float
  paymentProofUrl String? // Optional proof of transfer URL
  payment         Payment?
  status          String   @default("pending") // pending, confirmed, cancelled
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  field Field @relation(fields: [fieldId], references: [id])
}

model Payment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  reservationId String      @unique @db.ObjectId
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  paymentMethod String // e.g., bank transfer
  paymentProof  String // URL to the uploaded proof
  paymentStatus String      @default("pending") // pending, completed, failed
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  fieldId   String   @db.ObjectId
  field     Field    @relation(fields: [fieldId], references: [id])
  rating    Int // Rating value, validate in the app (1 to 5)
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
